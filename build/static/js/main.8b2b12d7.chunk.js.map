{"version":3,"sources":["components/AddArea.jsx","components/List.jsx","components/CardDetails.jsx","components/Modal.jsx","services/lists.js","services/cards.js","App.js","index.js"],"names":["AddArea","area","id","addNewItem","addFormWrapRef","useRef","addFormRef","useState","newItem","setNewItem","showForm","setShowForm","useEffect","handleClickOutside","e","current","contains","target","dispatchEvent","Event","cancelable","document","addEventListener","removeEventListener","className","ref","onSubmit","preventDefault","placeholder","value","onChange","autoFocus","type","onClick","Card","card","onOpenCard","title","List","list","cardsInList","onAddCard","map","key","CardDetails","onCardClose","formatDate","date","Date","toLocaleString","year","month","day","hour","minute","second","on","start","timeSpent","timer","setTimer","interval","setInterval","now","clearInterval","style","position","top","right","fontSize","color","description","dueDate","push","stop","toISOString","substr","sort","a","b","Modal","show","children","onCloseModal","getAll","axios","get","then","response","data","create","newObject","post","update","put","getById","App","lists","setLists","showCard","setShowCard","cardToShow","setCardToShow","listService","initialLists","handleAddNewCard","cardObject","cardService","returnedCard","l","cards","concat","currentTask","handleOpenCard","length","listObject","returnedList","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8b2b12d7.chunk.js","sourcesContent":["import React, {useRef, useState, useEffect} from 'react'\r\nimport './AddArea.css'\r\n// Reuseable add area for both card and form\r\nconst AddArea = ({ area, id, addNewItem }) => {\r\n    \r\n    const addFormWrapRef = useRef()\r\n    const addFormRef = useRef()\r\n\r\n    const [newItem, setNewItem] = useState('')\r\n    const [showForm,setShowForm] = useState('')\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = e => {\r\n            if (addFormWrapRef.current.contains(e.target)) {\r\n                // inside click\r\n                return\r\n              }\r\n              //Submit the form on outside click, it will make a new item (list/card) if the field is not empty. \r\n              //In either case form will be closed on an outside click\r\n              addFormRef.current.dispatchEvent(new Event('submit', { cancelable: true }))\r\n        }\r\n        if(showForm){\r\n            document.addEventListener(\"mousedown\", handleClickOutside)\r\n        } else {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside)\r\n        }\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside)\r\n        }\r\n    },[showForm])\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault()\r\n        newItem && addNewItem(newItem,id) // ID is passed for card to identify on which list card should be created\r\n        //Id will be null for a new list\r\n        setNewItem('')\r\n        setShowForm(false)\r\n    }\r\n\r\n    const onCancel = e => {\r\n        e.preventDefault()\r\n        setNewItem('')\r\n        setShowForm(false)\r\n    }\r\n\r\n    return showForm ?\r\n      <div className='add-form-wrapper' ref={addFormWrapRef}>\r\n      <form id='add-form' ref={addFormRef} onSubmit={onSubmit} >\r\n          <textarea  \r\n              id='add-input'\r\n              placeholder={`Enter a title for the ${area}`}\r\n              value={newItem}\r\n              onChange={e => setNewItem(e.target.value)}\r\n              autoFocus\r\n          />\r\n          <div className='add-area-btns'>\r\n            <button type='submit' className='add-btn'> Add </button>\r\n            <button type= 'reset' onClick={onCancel} className='cancel-btn'> Cancel </button>\r\n          </div>\r\n      </form>\r\n      </div>\r\n    : <button className={`add-${area}`} onClick={() => setShowForm(true)}> \r\n    <i className=\"fas fa-plus\"></i> <strong>Add {area}</strong></button>\r\n}\r\n\r\nexport default AddArea","import React from 'react'\r\nimport AddArea from './AddArea'\r\nimport './List.css'\r\n\r\nconst Card = ({ card, onOpenCard }) => {\r\n    \r\n    return <div className='card' onClick={() => onOpenCard(card.id)}>\r\n    <p>{card.title}</p>\r\n    </div>\r\n}\r\n\r\nconst List = ({ list, cardsInList, onAddCard, onOpenCard }) => {\r\n\r\n    return (<div className='list'>\r\n    <h2 className='list-title'>{list.title}</h2>\r\n    <div className='cards-wrapper'>\r\n      {cardsInList.map(card => <Card key={card.id} card={card} onOpenCard={onOpenCard} />)}\r\n    </div>\r\n    <AddArea  \r\n        area='card'\r\n        addNewItem={onAddCard} \r\n        id={list.id}\r\n        /> \r\n    </div>)\r\n}\r\n\r\nexport default List","import React, { useState, useEffect } from 'react'\r\n\r\nconst CardDetails = ({ card, onCardClose }) => {\r\n    \r\n    const cancelStyle = {\r\n        position: 'absolute',\r\n        top: '10px',\r\n        right: '15px',\r\n        fontSize: '1.7rem',\r\n        color: '#767c77',\r\n    }\r\n\r\n    const clockStyle = {\r\n        fontSize: '2rem'\r\n    }\r\n\r\n    const formatDate = (date) => {\r\n        return new Date(date).toLocaleString('en-GB', {year: 'numeric', month: 'short', day: 'numeric',hour: 'numeric',minute: 'numeric', second: 'numeric'})\r\n    }\r\n    \r\n    const [timer,setTimer] = useState({on: false, start: 0,timeSpent: 0}) //Stores the start time if the timer is on\r\n\r\n    useEffect(() => {\r\n        let interval\r\n        if(timer.on){\r\n            interval = setInterval(() => {\r\n                // setTimer({ ...timer,timeSpent: Math.floor((Date.now() - timer.start)/1000) })\r\n                setTimer({...timer,timeSpent: Date.now() - timer.start })\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval)\r\n        }\r\n        return () => clearInterval(interval)\r\n    },[timer])\r\n\r\n    const onTimerClick = () => {\r\n        if(timer.on){\r\n            card.timeSpent.push({start: timer.start, stop: Date.now() }) \r\n            setTimer({on: false, start: 0,timeSpent: 0})\r\n            return\r\n        } \r\n        setTimer({ on: true, start: Date.now(), timeSpent: 0 })\r\n    } \r\n    \r\n    return <div>\r\n        <h3>{card.title}</h3>\r\n        <i className=\"fas fa-times\" style={cancelStyle} onClick={onCardClose}></i>\r\n        <p><strong>Description</strong> {card.description}</p>\r\n        <p><strong>Due date</strong> {card.dueDate}</p>\r\n        <i className=\"far fa-clock\" style={clockStyle} onClick={onTimerClick}> {timer.on? 'Stop': 'Start'} timer</i>\r\n        {timer.on && <p>{new Date(timer.timeSpent).toISOString().substr(11, 8)}</p>}\r\n        {card.timeSpent && ([...card.timeSpent]\r\n        .sort((a,b) => b.start-a.start))\r\n        .map(timeSpent => <p key={timeSpent.start} >{formatDate(timeSpent.start)} - {formatDate(timeSpent.stop)}</p> )}\r\n    </div>\r\n}\r\n\r\nexport default CardDetails\r\n","import React from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({ show, children, onCloseModal }) => {\r\n    \r\n    return show ? \r\n    <div>\r\n        <div className='modal'>{ children }</div>\r\n        <div className='backdrop' onClick={onCloseModal}/>\r\n    </div>\r\n    : null\r\n}\r\n\r\nexport default Modal","import axios from 'axios'\r\nconst baseUrl = '/api/lists'\r\n\r\n// let token = null\r\n\r\n// const setToken = newToken => {\r\n//   token = `bearer ${newToken}`\r\n// }\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = async newObject => {\r\n//   const config = {\r\n//     headers: { Authorization: token },\r\n//   }\r\n\r\n  const response = await axios.post(baseUrl, newObject)\r\n  return response.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${ baseUrl }/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update}","import axios from 'axios'\r\nconst baseUrl = '/api/cards'\r\n\r\nconst create = async newObject => {\r\n  const response = await axios.post(baseUrl, newObject)\r\n  return response.data\r\n}\r\n\r\nconst update = async (id, newObject) => {\r\n  const response = await axios.put(`${ baseUrl }/${id}`, newObject)\r\n  return response.data\r\n}\r\n\r\nconst getById = async (id) => {\r\n    const response = await axios.get(`${ baseUrl }/${id}`)\r\n    return response.data\r\n}\r\n\r\nexport default { create, update, getById }","import React, { useState, useEffect } from 'react'\nimport List from './components/List'\nimport AddArea from './components/AddArea'\nimport CardDetails from './components/CardDetails'\nimport Modal from './components/Modal'\nimport listService from './services/lists'\nimport cardService from './services/cards'\nimport './App.css'\n\nconst App = () => {\n  \n  const [lists, setLists] = useState('')\n  // const [cards, setCards] = useState('')\n  const [showCard, setShowCard] = useState(false)\n  const [cardToShow, setCardToShow] = useState('')\n\n  useEffect(() =>{\n    listService\n      .getAll()\n      .then(initialLists => {\n        setLists(initialLists)\n      })\n      \n  },[])\n\n  const handleAddNewList = (title,...ignore) => {\n      const listObject = { title }\n      \n      listService\n      .create(listObject)\n      .then(returnedList => {\n        setLists(lists.concat(returnedList))\n      })\n  }\n  const handleAddNewCard = (title,list) => {\n      const cardObject = {\n        title,\n        list\n      }\n      cardService\n        .create(cardObject)\n        .then(returnedCard => {\n          setLists(lists.map(l => l.id !== list ? l : {...l,cards: l.cards.concat({ \n            title: returnedCard.title,\n            dueDate: returnedCard.dueDate,\n            currentTask: returnedCard.currentTask,\n            id: returnedCard.id\n          }) \n        }))\n        })\n  }\n\n  const handleOpenCard = async (id) => {  \n    setShowCard(true)\n    // setCardToShow(cards.find(card => card.id === id))\n    const returnedCard = await cardService.getById(id)\n    setCardToShow(returnedCard)\n    \n  }\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n      <h1>Task Manager</h1>\n      </header>\n      <main className='main'>\n      {lists.length !== 0 && lists.map(list => \n      <List \n        key={list.id} \n        list={list} \n        cardsInList={list.cards}\n        onAddCard={handleAddNewCard}\n        onOpenCard={handleOpenCard}\n      />)}\n      <Modal show={showCard} onCloseModal={ () => setShowCard(false)}>\n        <CardDetails card={cardToShow} onCardClose={() => setShowCard(false)} /> \n        {/* {JSON.stringify(cardToShow)} */}\n      </Modal>\n      <AddArea  \n        area='list'\n        id={null} \n        addNewItem={handleAddNewList}\n        />\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}